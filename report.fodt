Proje Raporu: LangChain ve OpenAI GPT Kullanarak Etkileşimli Veri Sorgulama Sistemi

1. Giriş

Bu proje, LangChain ve OpenAI'nin gpt-4 modelini kullanarak etkileşimli bir veri sorgulama sistemi geliştirmeye odaklanmaktadır. Sistem, kullanıcıların bir CSV dosyasındaki verilerle sürekli olarak etkileşim kurmalarına olanak tanır, bu sayede kullanıcılar veriler hakkında sorular sorabilir ve gerçek zamanlı olarak doğru ve ilgili yanıtlar alabilir.

2. Amaç

Projenin temel amacı, kullanıcılara bir CSV dosyasında saklanan verilerle etkileşim kurma imkanı tanıyan bir sistem geliştirmektir. LangChain kütüphanesi ve OpenAI'nin güçlü dil modelini kullanarak, sistem kullanıcıların veri hakkında sorular sormasına ve gerçek zamanlı olarak doğru yanıtlar almasına olanak tanır.


3. Sistem Mimarisi

Sistem mimarisi, istenen işlevselliği sağlamak için birlikte çalışan birkaç ana bileşenden oluşmaktadır:

1.	Veri Yükleme ve Dönüştürme:

o	CSV dosyası okuma modunda açılır ve içeriği bir değişkene okunur.
o	İçerik, daha fazla işleme imkan tanımak için bir metin dosyasına yazılır.
2.	Metin Bölme:

o	CSV dosyasından alınan metin verisi, RecursiveCharacterTextSplitter kullanılarak yönetilebilir parçalara bölünür. Bu adım, büyük veri kümelerini etkili bir şekilde işlemek için önemlidir, çünkü veriler daha küçük segmentlere ayrılarak bireysel olarak işlenebilir hale getirilir.

3.	Embedding Oluşturma:

o	OpenAI'nin gpt-4 modeli, metin parçaları için embeddings oluşturur. Bu embeddings, kullanıcı sorgularına göre ilgili veri segmentlerinin verimli bir şekilde alınmasını sağlayan Chroma kütüphanesi kullanılarak bir vektör deposunda saklanır.
4.	RAG Zincir Yapılandırması:


o	RAG zinciri, ilgili veri segmentlerinin alınması ve dil modelinin yanıt üretmesi için belgelerin formatlanmasını içerir. Bu zincir, LangChain hub'ından alınan önceden eğitilmiş bir RAG promptunu kullanır.

5.	Etkileşimli Sorgulama:

o	Sistem, kullanıcı çıkış yapmaya karar verene kadar sürekli çalışacak şekilde tasarlanmıştır.
o	Kullanıcılar veri ile ilgili sorular girebilir ve sistem, yanıtı gerçek zamanlı olarak ileterek anında geri bildirim sağlar.


4. Uygulama Detayları

Sistemin uygulanması şu adımlarda detaylandırılmıştır:

1.	Ortam Kurulumu:

o	OpenAI API ve diğer bağımlılıklar için gerekli ortam değişkenlerini ayarlamak amacıyla .env dosyası yüklenir.

2.	Veri İşleme:

o	CSV dosyası okunarak içeriği bir değişkene alınır ve ardından bir metin dosyasına yazılır.
o	LangChain'in TextLoader sınıfı kullanılarak metin verisi yüklenir ve daha sonra verimli bir şekilde işlenmesi için daha küçük parçalara bölünür.

3.	Vektör Deposu Oluşturma:

o	Metin parçaları için embeddings, OpenAIEmbeddings kullanılarak oluşturulur ve Chroma vektör deposuna kaydedilir. Bu, kullanıcı sorgularına göre ilgili veri segmentlerinin hızlı bir şekilde alınmasını sağlar.

4.	RAG Zincir Yapılandırması:

o	RAG zinciri, ilgili metin parçalarının alınması, formatlanması ve dil modeline iletilmesi için yapılandırılır.

5.	Gerçek Zamanlı Etkileşim:

o	Programın ana döngüsü kullanıcı etkileşimini yönetir. Kullanıcıdan sürekli olarak sorular girmesi istenir, giriş işlenir ve modelin yanıtı kullanıcı çıkış yapmayı seçene kadar iletilir.

5. Zorluklar ve Çözümler

•	Zorluk: Büyük veri kümelerini verimli bir şekilde işlemek.

o	Çözüm: RecursiveCharacterTextSplitter kullanılarak veriler yönetilebilir parçalara bölünür, bu da sistemin hafızayı aşırı yüklemeden ilgili bilgileri işlemesini ve almasını sağlar.
•	Zorluk: Kullanıcı sorgularına doğru ve ilgili yanıtlar sağlamak.
o	Çözüm: LangChain hub'ından alınan önceden eğitilmiş bir RAG promptunun kullanılması ve gpt-4'ün güçlü dil yetenekleri ile yanıtların hem doğru hem de bağlamsal olarak ilgili olması sağlanır.

6. Sonuç

Bu proje, LangChain ile OpenAI'nin GPT-4'ünü entegre ederek etkileşimli bir veri sorgulama sistemi oluşturmayı başarıyla göstermektedir. Sistem, kullanıcıların bir CSV dosyasında saklanan verilerle sürekli olarak etkileşim kurmalarına olanak tanır ve sorular sormalarını ve gerçek zamanlı olarak yanıtlar almalarını sağlar. LangChain'in metin işleme ve geri alma yeteneklerinin, OpenAI'nin gelişmiş dil modeli ile birleşimi, büyük veri kümelerini sorgulama ve bunlarla etkileşim kurma konusunda sağlam bir çözüm sunar.

7. Gelecek Çalışmalar

•	Geliştirmeler: Daha karmaşık veri formatlarını desteklemek ve ek veri kaynaklarını entegre etmek.
•	Optimizasyon: Metin bölme ve embedding oluşturma süreçlerini optimize ederek sistemin verimliliğini artırmak.
•	Kullanıcı Arayüzü: Sistemi teknik olmayan kullanıcılar için daha erişilebilir hale getirmek amacıyla kullanıcı dostu bir GUI geliştirmek.


Üzerine çalışılacaklar:

Tablo verileri, metin için tasarlanmış vektör veri depolarında iyi çalışmıyor.
Bu durumu iyileştirmek için şu fikirleri deneyebiliriz (ne kadar etkili olacakları verilere bağlı):
•	Tüm CSV dosyasını bir metin açıklamasıyla birlikte vektör deposuna kaydedip, ardından arama işleminden sonra tüm tabloyu prompta beslemek
•	Tablo verileri için tasarlanmış, Microsoft'un açık kaynak projesi olan TAPAS'ı incelemek.
•	Verileri bir veritabanına kaydedin ve ardından bunu sorgulamak için bir ajan yazın.(Hazır ajanları denedim ve güzel çalışıyorlar.)

